type: "SigNN"

input_stream: "LANDMARKS:multi_hand_landmarks"
output_stream: "RENDER_DATA:output"


node {
    calculator: "HandGateCalculator"
    input_stream: "LANDMARKS:multi_hand_landmarks"
    output_stream: "LANDMARKS:landmarks"
    output_stream: "SIGNAL:invalid_hands"
    node_options: {
      [type.googleapis.com/mediapipe.HandGateCalculatorOptions] {
        memory_in_seconds: 1
        percent_of_one_hand_required: .5
      }
    }
}

node {
    calculator: "StringEmitterCalculator"
    input_stream: "SIGNAL:invalid_hands"
    output_stream: "STRING:invalid_hands_text"
    node_options: {
      [type.googleapis.com/mediapipe.StringEmitterCalculatorOptions] {
        given_string: "Display 1 hand"
      }
    }
}

node {
  calculator: "StringToRenderDataCalculator"
  input_stream: "STRING:invalid_hands_text"
  output_stream: "RENDER_DATA:invalid_hands_render"
}



node {
  calculator: "FPSCalculatorOneHand"
  input_stream: "LANDMARKS:landmarks"
  output_stream: "DOUBLE:fps"
}

node {
  calculator: "FPSGateCalculator"
  input_stream: "DOUBLE:fps"
  input_stream: "LANDMARKS:landmarks"
  output_stream: "LANDMARKS:fps_gated"
  output_stream: "SIGNAL:invalid_fps"
  node_options: {
    [type.googleapis.com/mediapipe.FpsGateCalculatorOptions] {
        memory_in_seconds: 5
        minimum_fps: 3
      }
  }
}


node {
  calculator: "StringEmitterCalculator"
  input_stream: "SIGNAL:invalid_fps"
  output_stream: "STRING:invalid_fps_text"
  node_options: {
    [type.googleapis.com/mediapipe.StringEmitterCalculatorOptions] {
      given_string: "FPS too low"
      }
  }
}

node {
  calculator: "StringToRenderDataCalculator"
  input_stream: "STRING:invalid_fps_text"
  output_stream: "RENDER_DATA:invalid_fps_render"
}

node{
  calculator: "LandmarkHistoryCalculator"
  input_stream: "LANDMARKS:fps_gated"
  output_stream: "LANDMARKS:lstm_input"
  node_options: {
    [type.googleapis.com/mediapipe.LandmarkHistoryCalculatorOptions] {
      memory_in_seconds: 3
      }
  }
}


node {
  calculator: "SigNNStatic"
  input_stream: "LANDMARKS:fps_gated"
  output_stream: "RENDER_DATA:signn_render"
}

node {
  calculator: "SignnEndGateCalculator"
  input_stream: "signn_render"
  input_stream: "invalid_fps_render"
  input_stream: "invalid_hands_render"
  output_stream: "RENDER_DATA:output"
  input_stream_handler {
    input_stream_handler: 'ImmediateInputStreamHandler'
  }
}